spring:
  application:
    name: rongly-framework-demo
  profiles:
    active:
      local
  redis:
    host: r-2ze2dfeae91a8e84.redis.rds.aliyuncs.com
    port: 6379
    password: Decrds2018
#    cluster:
#      nodes:
#      - 10.10.3.71:7000
#      - 10.10.3.71:7001
#      - 10.10.3.71:7002
    lettuce:
      pool:
        max-active: 10
        max-idle: 3
  cache:
    redis:
      time-to-live: 10000s #默认过期时间 不设置默认永不过期
      use-key-prefix: false # 不使用cache-name:: 默认使用
  session:
    store-type: REDIS
    timeout: 180s
  data:
    mongodb:
      database: testdb
      uri: mongodb://47.95.120.66:27011/testdb
  kafka:
    producer:
      bootstrap-servers: 47.95.120.66:9092,47.95.120.66:9093,47.95.120.66:9094
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
      properties:
        interceptor.classes:
          com.rongly.framework.demo.kafkaComsume.interceptor.MyKafkaInterceptor
    consumer:
      bootstrap-servers: 47.95.120.66:9092,47.95.120.66:9093,47.95.120.66:9094
      group-id: ${spring.application.name}
      enable-auto-commit: false
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    listener:
      ack-mode: manual_immediate

rongly:
  zookeeper:
    enabled: true #是否使用zookeeper
    connect-string: 47.95.120.66:2181,47.95.120.66:2182,47.95.120.66:2183
    connection-timeout-ms: 10000
  jdbc:
    ronglyJdbc:
      ds-master: #不支持多个写入
        jdbcUrl: jdbc:mysql://47.95.120.66:9999/rongly?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false
        userName: root
        password: rongly1115
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcPoolConfig:
          maximumPoolSize: 30
          connectionInitSql: 'set names utf8mb4;'
      ds-slave-1:
        jdbcUrl: jdbc:mysql://47.95.120.66:9999/rongly?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false
        userName: root
        password: rongly1115
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcPoolConfig:
          maximumPoolSize: 30
          connectionInitSql: 'set names utf8mb4;'
      ds-slave-2:
        jdbcUrl: jdbc:mysql://47.95.120.66:9999/rongly?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false
        userName: root
        password: rongly1115
        driverClassName: com.mysql.jdbc.Driver
        jdbcPoolConfig:
          maximumPoolSize: 30
          connectionInitSql: 'set names utf8mb4;'
#读写分离配置
  sharding:
    jdbc:
      config:
#        masterslave: 分库分表后读写分离配置去掉
#         load-balance-algorithm-type: round_robin
#         name: dataSource
#         master-data-source-name: ds-master
#         slave-data-source-names: ds-slave-1,ds-slave-2
        sharding:
          tables:
            cart:
              actualDataNodes: ds_$->{1}.cart_$->{1..3}
              databaseStrategy:
                standard:
                  sharding-column: buyUserId
                  precise-algorithm-class-name: com.rongly.framework.demo.sharingStrategy.PreciseModuleDatabaseShardingAlgorithm
                  range-algorithm-class-name: com.rongly.framework.demo.sharingStrategy.RangeModuleDatabaseShardingAlgorithm
              tableStrategy:
                standard:
                  sharding-column: buyUserId
                  precise-algorithm-class-name: com.rongly.framework.demo.sharingStrategy.PreciseModuleTableShardingAlgorithm
                  range-algorithm-class-name: com.rongly.framework.demo.sharingStrategy.RangeModuleTableShardingAlgorithm
          default-data-source-name: ds-master
          master-slave-rules:
             ds_1:
               master-data-source-name: ds-master
               slave-data-source-names: ds-slave-1,ds-slave-2
          binding-tables: cart
  security:
    browser:
      signInPage: /rongly-signIn.html
      signInResponseType: JSON
      singInSuccessUrl: /index.html
      signOutUrl: /rongly-logout.html
    exclude-paths: /user/exception,/actuator/*,/authentication/mobile
    oauth2:
      clients[0]:
        clientId: rongly
        clientSecret: ronglySecret
      jwt-signing-key: imooc
      token:
        use: jwt

#mybatis.config-location: classpath:mapper/mybatis-config.xml
#mybatis.mapper-locations: classpath:mapper/module/*.xml
#mybatis.typeAliasesPackage: com.rongly.framework.demo.entity
#mybatis:
#  type-handlers-package: com.rongly.framework.demo.dao
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:mapper/module/*/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.rongly.framework.demo.entity
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: false
    #mp2.3+ 全局表前缀 mp_
    table-prefix:
    #刷新mapper 调试神器
    #refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    # Sequence序列接口实现类配置
    key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: false
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    #jdbc-type-for-null: 'null'
  type-handlers-package: com.rongly.zupu.dao
logging:
  file: ${spring.application.name}
  level:
    jdbc:
      sqltiming: WARN #包含 SQL 语句实际的执行时间
      audit: 'OFF' # 	除了 ResultSet 之外的所有JDBC调用信息，篇幅较长
      resultset: 'OFF' #包含 ResultSet 的信息，输出篇幅较长
      connection: 'debug' #连接信息
      sqlonly: 'info' #仅仅记录 SQL 语句，会将占位符替换为实际的参数
log4jdbc.sqltiming:
  warn.threshold: 300   # 300ms 会打印warn级别的日志
  error.threshold: 500  # 500ms 会打印error级别的日志

#监控配置
management:
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true
  endpoints:
    web:
      cors:
        allow-credentials: false
        allowed-origins: '*'
        allowed-headers: '*'
        allowed-methods: '*'
      exposure:
        include:
          - health     # 健康检查
          - info       # 项目信息
          - env        # 环境变量
          - metrics    # 项目度量
          - refresh    # 刷新配置
          - loggers    # 日志级别
          - mappings   # 请求接口路径
          - beans
          - configprops
          - status
          - httptrace
          - httpdump
          - scheduledtasks
          - rongly-scheduledtasks
dubbo:
  application:
    name: rongly-framework-demo
    id: rongly-framework-demo
  registry:
    client: curator
    address: zookeeper://47.95.120.66:2181?backup=47.95.120.66:2182,47.95.120.66:2183
  protocol:
    name: dubbo
    port: 20880
  provider:
    group: rongly-framework-demo
    timeout: 500
